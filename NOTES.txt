

DESCRIPTION:


USAGE:

    toggle seeing:
        edges between nodes - w/ "c"
        selected device's:
            pings    - w/ "p0 *enter*"
            echos    - w/ "e0 *enter*"
            messages - w/ "m0 *enter*"
        devices' in range of selected device:
            pings    - w/ "p1 *enter*"
            echos    - w/ "e1 *enter*"
            messages - w/ "m1 *enter*"
        signal rings        - w/ "r"
        message dots        - w/ "d"


SOURCES:

    https://www.pygame.org/docs/

    PyGame color Codes
    https://www.webucator.com/blog/2015/03/python-color-constants-module/


OTHER:

    average walking speed of person in km/s
        1.4 meters per second
            https://en.wikipedia.org/wiki/Walking
                Ctrl f + "1.4 meters per second"
    speed of light in km/s
        if signal blasted past R in one time step would that fuck up anything?
            it would fuck up the estimated distance
            so make it as fast as possible to simulate reality more closely but
            also be slow enough to:
                not fuck up the estimated neighbor distance
                be easy to look at
    signal range of average cellphone in km
        22 to 45 miles (aka 35.4 to 72.4 km)
            https://www.google.com/search?sxsrf=ACYBGNTA2F2aucCt8D-iqAssigxuhBvb2Q%3A1581976773203&ei=xQxLXsj3C4SAtQW_h6OQDA&q=cell+phone+range&oq=cell+phone+range&gs_l=psy-ab.3..35i39j0i20i263j0i7i30l3j0j0i7i30l2j0j0i7i30.146452.146876..147023...0.2..0.118.529.1j4......0....1..gws-wiz.......0i71j35i304i39.b-dWK8K9D8s&ved=0ahUKEwiI7u_cytnnAhUEQK0KHb_DCMIQ4dUDCAs&uact=5


IDEAS:

    if the first neighpbor can verify the sender is who they say they are, they can pass on that verification, and then verify they're who THEY say they are, and the 2nd neighbor can verify the same, ... and a path can be built

    what if you used the position triangluation to verify that someone isn't using a server farm to run a bunch of nodes
    in order for nodes to count they need to be spread out (and moving frequenty? what about desktops) to exibit normal device behavior

    can current router hardware communicate directly with each other, if they're in range?
        probably not, we need something that extends MILES, not the area of a house


TO DO:

    NOW:

        make it so regular messages are passed along
            this requires the display to show messages for ALL nodes
                i think something like a p2, e2, and m2 would work
            this requires a way to be developed so that a node wont pass it along if its received it before
                to keep loops from happening

        set up basic pk sk thing and fix display to support it
            use sha256 lib
            also google how it works and write a quick explaination of it somewhere in this repo

    EVENTUALLY:

        the the block_printer fucks up when the text has more lines than the console can display
            depending on however zoomed in the console text is
            it would be awesome if this could be accounted for

        maybe pygame clock is better than time.time()
            clock = pygame.time.Clock()
            https://stackoverflow.com/questions/34383559/pygame-clock-tick-vs-framerate-in-game-main-loop

        make simulation faster by:

            model could probably be made faster if we didn't copy over so much data
                its done to avoid messing up the iteration by deleting during an iteration though
                    if we could find a way to delete without messing up the iteration,
                        for lists we could iterate by index and then decrement the index when we delete
                        what about dictionaries though?
                            aren't dictionary keys a set in python?
                                does deleting from a set mess up iterating over it?

                searching through the code for places where we don't have to copy over data
                could be done simultaniously while we are searching for places to thread

            model could be faster if we did more stuff in parallel using

                async lib
                    https://realpython.com/async-io-python/

                    Efficient Parallel Graph Algorithms in Python
                    https://pdfs.semanticscholar.org/54b9/22a51e5aa04e7512720348c2deda33e2e4ee.pdf

                or just use basic threading
                    see threading_example1.py

                    once you thread it:
                        in the console output
                        change fps global variable to
                            model.fps
                            view.fps
                            controller.fps

        make static map and cellular automata maps
            figure out how to get a fully connected network that is distributed evenly
            over the entire area ... more or less

            #################### these model functions to be fixed #############################

                # create devices that are stationary in the map
                def init_static_devices(self, verbose=False):
                    pass

                # return boolean flagging if ALL the devices form 1 fully connected network
                def fully_connected_network(self, devices, connections):
                    for d, c in connections.items():
                        if len(c) == 0:
                            return False
                    return True

                # return a list of node networks
                def get_networks(self, devices, connections, verbose=False):

                    def get_network_recurrsively(d0, connections, network):
                        network += [n0]
                        for c in connections[d0]: # self.get_direct_neighbors(n0, unvisited_nodes):
                            nd = c.keys[0] # nd = neighboring device
                            if nd not in network:
                                network = get_network_recurrsively(d, connections, network)
                        return network

                    networks = []
                    devices = list(filter(lambda d : isinstance(d, Device), devices)) # for cellular automata
                    unvisited_devices = copy.deepcopy(devices)
                    while len(unvisited_devices) > 0:
                        d0 = unvisited_devices[0]
                        network = get_network_recurrsively(d0, connections, [])
                        networks.append(network)
                        for d in network:
                            unvisited_devices.remove(d)

                    if verbose:
                        print('\n%d Networks:' % len(networks))
                        for i, network in enumerate(networks):
                            print('\nNetwork %d has %d device(s)' % (i+1, len(network)))
                            for d in network:
                                d.print_d()

                    return networks

                # network 0: N nodes constantly throughout all time steps for the entire simulation
                def create_random_network(self, verbose=False):

                    # self.nodes = [Node()]
                    # while len(self.nodes) < N:
                    #     n = Node()
                    #     self.nodes.append(n)
                    #     if len(self.get_direct_neighbors(n).keys()) == 0:
                    #         self.nodes.remove(n)
                    # return self.nodes

                    # self.nodes = [Node() for _ in range(N)]
                    # while not self.fully_connected_network():
                    #     print('Fail')
                    #     self.nodes = [Node() for _ in range(N)]
                    # if verbose:
                    #     print('Created network0 of %d nodes' % N)
                    # return self.nodes

                    nodes = [Node() for _ in range(N)]
                    connections = self.get_network_state(nodes)
                    networks = self.get_networks(nodes, verbose=verbose)
                    return nodes, connections

                # cellular automata
                def create_grid_network(self, verbose=False):
                    # create grid with one node at the center
                    # nodes = np.array([[Node(x, y) for x in range(W)] for y in range(H)]).flatten().tolist()
                    nodes = []
                    for x in range(W):
                        grid_col = []
                        for y in range(H):
                            grid_col.append(
                                Node(x, y) if (x, y) in AUTOMATA_START_POSITIONS['one_center'] else str(x)+','+str(y))
                        nodes += grid_col
                    if verbose:
                        for y in range(H):
                            s = ''
                            for x in range(W):
                                s += ('N' if isinstance(nodes[x*H+y], Node) else '*') + ' '
                            print(s)

                    connections = self.get_network_state(nodes)
                    # networks = self.get_networks(nodes, verbose=verbose)
                    return nodes, connections
                def evolve_grid(self, verbose=False):

                    def evolve_cell(x0, y0, nodes):

                        # get grid neighbors state
                        # print('Finding Neighbours (x0, y0) = (%d, %d)' % (x0, y0))
                        neighbours = []
                        for x in range(x0-1, x0+2):
                            for y in range(y0-1, y0+2):

                                # no wrap around
                                if 0 <= x < W and 0 <= y < H:
                                    if not (x == x0 and y == y0):
                                        # print('x = %d y = %d   %s' % (x, y, 'ALIVE' if isinstance(nodes[x*H+y], Node) else 'dead'))
                                        neighbours.append(nodes[x*H+y])

                                # # wrap around
                                # x = W-1 if x == -1 else x
                                # x = 0 if x == W else x
                                # y = H-1 if y == -1 else y
                                # y = 0 if y == H else y
                                # if not (x == x0 and y == y0):
                                #     print('x = %d y = %d   %s' % (x, y, 'ALIVE' if isinstance(nodes[x*H+y], Node) else 'dead'))
                                #     neighbours.append(nodes[x*H+y])

                        # count neighbouring nodes

                        nn = len(list(filter(lambda n : isinstance(n, Node), neighbours)))
                        # print('nn = %d' % nn)

                        def conways_game_of_life():
                            cell0 = nodes[x0*H+y0]
                            dead = str(x0)+','+str(y0)
                            print('cell0 at (%d, %d)' % (x0, y0))
                            if isinstance(cell0, Node):
                                print('ALIVE')
                                if nn < 2: # Death by isolation
                                    print('Death by isolation')
                                    return dead
                                elif 1 < nn < 4: # Survival
                                    print('Survival')
                                    return cell0
                                elif 3 < nn: # Death by overcrowding
                                    print('Death by overcrowding')
                                    return dead
                            else: # cell0 == None
                                print('dead')
                                if nn == 3: # Births
                                    print('birth')
                                    return Node(x0, y0)
                                else:
                                    print('stay dead')
                                    return dead
                        def forest_fire():
                            cell0 = nodes[x0*H+y0]
                            empty   = str(x0)+','+str(y0)
                            burning = empty + ' burning'
                            print('cell0 at (%d, %d)' % (x0, y0))
                            if isinstance(cell0, Node):
                                print('tree')
                                if nn < 0: # A tree will burn if at least one neighbor is burning
                                    print('tree will burn if at least one neighbor is burning')
                                    return burning
                                else:
                                    # A tree ignites with probability F even if no neighbor is burning
                                    return cell0 if random.uniform(0, 1) <= F else burning
                            else: # not a tree
                                if cell0.endswith(' burning'): # A burning cell turns into an empty cell
                                    print('burning')
                                    return empty
                                else: # An empty space fills with a tree with probability p
                                    print('empty')
                                    return Node(x0, y0) if random.uniform(0, 1) <= P else cell0
                        def forest():
                            cell0 = nodes[x0*H+y0]
                            empty = str(x0)+','+str(y0)
                            pn = float(nn/8) # percent neighbors
                            if isinstance(cell0, Node): # tree
                                # the more trees there are around a tree,
                                # the more likely the tree will die (become an empty space)
                                # a tree will not die if it has no neighbours
                                return cell0 if nn == 0 or random.uniform(0, 1) <= 1.00 - pn*percent_trees else empty

                            else: # empty
                                # a tree can only grow if there is at least 1 neighbor
                                # the less nn there are around an empty space the more likely a tree will grow
                                # nn: min=0, max=8
                                # probablility: min=0, max=100
                                # if few  neighbors: high likelyhood
                                # if many neighbors: low  likelyhood 8n 1/9 p
                                return Node(x0, y0) if nn > 0 and random.uniform(0, 1) <= 1.00 - pn*percent_trees else empty

                        return forest()

                    # for forest growth
                    num_trees = len(list(filter(lambda n :     isinstance(n, Node), self.nodes)))
                    num_empty = len(list(filter(lambda n : not isinstance(n, Node), self.nodes)))
                    percent_trees = float(num_trees) / num_empty

                    nodes = []
                    for x in range(W):
                        for y in range(H):
                            # print()
                            nodes.append(evolve_cell(x, y, self.nodes))

                    # ensure we never delete all the nodes
                    if nodes:
                        non_empty_nodes = []
                        for n in self.nodes:
                            if isinstance(n, Node):
                                non_empty_nodes.append(n)
                    nodes = [non_empty_nodes[random.randint(len(non_empty_nodes))]] if nodes == [] else nodes

                    self.nodes = nodes
                    self.connections = self.get_network_state(self.nodes)

                    if verbose:
                        print('Grid Evolution')
                        for y in range(H):
                            s = ''
                            for x in range(W):
                                s += ('N' if isinstance(self.nodes[x*H+y], Node) else '*') + ' '
                            print(s)
                        print('------------------------------------------------------')


                this was at the end of model.update()

                    # update the Nodes in the network every AUTOMATA_PERIOD
                    if (t - self.t2) > AUTOMATA_PERIOD:
                        self.evolve_grid(verbose=False)
                        self.t2 = t
            ####################################################################################


        maybe use this to improve device movement
        https://github.com/florimondmanca/pyboids
        where each boid has its own destination

